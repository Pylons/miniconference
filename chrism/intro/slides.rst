.. include:: <s5defs.txt>

Pyramid Web Framework
=====================

.. class:: center

   Chris McDonough

   Agendaless Consulting

..  footer:: Pylons Minicon, 2011

Speaker Info
------------

- Chris McDonough (chrism-at-plope-dot-com)

- Zope developer (1999-2008)

- Chief BFG/Pyramid Bottlewasher (2008-present)

Pyramid History
---------------

- 2008 through 2010, existed as  ``repoze.bfg``.

- ``repoze.bfg`` Zope-inspired.  Features cadged from Pylons and Django.

- October 2010, ``repoze.bfg`` was forked to become Pyramid, a Pylons Project
  subproject.

- More Pylons-esque features added after fork.

- "Pay only for what you eat" web framework.

Pyramid Status
--------------

- Currently at 1.0.

- 1.1 due out soonly.

Pylons Project
--------------

- Merger of the Pylons, ``repoze.bfg``, and (to a lesser extent) TurboGears
  web frameworks.

- Pylons 1.x web framework shifted into “legacy” status.  Maintained
  indefinitely.

- v1.3 was the last release of ``repoze.bfg``.  Maintained indefinitely.

- "Repoze" now contains only software derived mostly from Zope
  (e.g. ``repoze.who``, ``repoze.tm2``, ``repoze.profile``, etc).

- Hoping to bring some TurboGears folks into Pyramid development soon.

Pyramid Features
----------------

- Map URLs to code.

- Authentication and authorization.

- Internationalization.

- Single-file apps or apps as packages.

- Easy unit, integration, functional testing.

- WSGI deployment.

- Comprehensive docs: ~650 pages of narrative docs, online cookbook and
  tutorials), updated frequently.

Pyramid Features (2)
--------------------

- Chameleon and Mako templating out of the box; Jinja2 as an add-on.
  Multiple templating systems can be used at the same time.

- Easy "REST API" creation and JSON rendering.

- Runs on CPython 2.4+, GAE, Jython, and PyPy (no Python 3 support yet).

- Multiple modes of configuration.

- Extensible configuration ("plugins", reuse apps without forking).

- Static asset features.

Pyramid Features (3)
--------------------

- Sessioning, flash messaging, CSRF protection.

- Event system.

- Exception views.

- WSGI middleware-provided exception debugging (WebError) and profiling
  (repoze.profile).

- Fast.

- 100% statement coverage via unit tests.

- ~ 98% condition decision coverage (via ``instrumental``).

Goldilocks Framework
--------------------

- Not a "full-stack" framework; persistence-system agnostic, no admin
  interface.

- Not a "microframework".  Has ~ 16 distribution dependencies.
  Microframework-like single-file apps possible though.

- Just a normal web framework.

Technologies
------------

- WebOb

- Paste

- ``zope.component``

- Chameleon

- Mako

- Venusian (scanning library)

Not Zope
--------

- Pyramid != Zope.  Only uses ``zope.component`` as a library.

- No "restricted execution" code ala Zope 2 "through the web" coding.

- Takes inspiration from Zope for some of its features (traversal,
  declarative authorization).

Not Pylons
----------

- Pyramid shares no DNA with Pylons.

- But supports many Pylons-esque features.

- Similar, but not identical routing syntax.

- Plugpoints implemented via composition rather than subclassing.

- Has an analogue of Pylons-style "controllers" called "handlers".

"MVC"
-----

- Labels.

- To me, it's not MVC.  To you, it might be.

- Lots of heat generated by arguments surrounding this term, very little
  light.

Sample Application
-------------------

.. sourcecode:: python

   from pyramid.config import Configurator
   from pyramid.response import Response
   from paste.httpserver import serve
   def hello_world(request):
       return Response('Hello world!')
   if __name__ == '__main__':
       config = Configurator()
       config.add_route('hello', '/hello')
       config.add_view(hello_world, route_name='hello')
       app = config.make_wsgi_app()
       serve(app, host='0.0.0.0')

Sample App With Decorators
--------------------------

.. sourcecode:: python

   # imports elided
   @view_config(route_name='hello')
   def hello_world(request):
       return Response('Hello world!')
   if __name__ == '__main__':
       config = Configurator()
       config.add_route('hello', '/hello')
       config.scan()
       app = config.make_wsgi_app()
       serve(app, host='0.0.0.0')

App Generation via Scaffold
---------------------------

::

   [chrism@thinko env26]$ bin/paster create -t \
                           pyramid_starter starter
   Selected and implied templates:
       # .. many more lines ...

Basic Layout
------------

::

   starter
   |-- development.ini
   |-- production.ini
   |-- setup.py
   `-- starter
       |-- __init__.py
       |-- resources.py
       |-- static/
       |-- templates/
       |-- tests.py
       `-- views.py

Running The App
---------------

::

  $ bin/paster serve development.ini

A View
------

- Views represent the code mapped to via a request.  Return a response.

.. sourcecode:: python

   from pyramid.response import Response

   def hello_world(request):
       return Response('Hello world!')

- Can also return something other than a response, if a "renderer" (template,
  json, string, xmlrpc) is used.

Route Predicates
----------------

.. sourcecode:: python

   if __name__ == '__main__':
       # ...
       config.add_route('home_GET', '/', 
                        request_method='GET')
       config.add_route('home_POST', '/',
                        request_method='POST')
       config.add_view('starter.views.my_get_view',
                       route_name='home_GET')
       config.add_view('starter.views.my_post_view',
                       route_name='home_POST')

View Predicates
---------------

- Multiple views can be associated with the same set of request
  circumstances.

- The "best" is chosen.

- View predicates are like route predicates but are input to view
  configuration statements (like ``@view_config``).

- Make it easy to create "RESTy" APIs and choose different views based on
  request data.

Templating and Renderers
------------------------

- Templates are "renderers".

.. sourcecode:: python

   @view_config(renderer='templates/mytemplate.pt')
   def my_view(request):
       return {'project':'starter'}

Templating and Renderers (2)
----------------------------

- JSON rendering is supported.

.. sourcecode:: python

   @view_config(renderer='json')
   def my_view(request):
       return {'project':'starter'}

Templating and Renderers (3)
----------------------------

- Renderers extensible as necessary (you can create your own and distribute
  them for others' usage).

Handlers
--------

- Pylons-style "controller" analogue.  Macro for a single "add_route" and a
  bunch of "add_view" statements.  Implemented by ``pyramid_handlers``.

.. sourcecode:: python

   from pyramid.view import action
   class MyHandler(object):
       def __init__(self, request):
           self.request = request
       @action(renderer='templates/mytemplate.pt')
       def index(self):
           return {'hello':'world'}

Handlers (2)
------------

.. sourcecode:: python

    if __name__ == '__main__':
        # ...
        config.include('pyramid_handlers')
        config.add_handler('myhandler',
                '/my/{action}', 
                handler='myapp.handlers.MyHandler')
        config.add_handler('myhandler', 
                '/my', 
                handler='myapp.handlers.MyHandler', 
                action='index')


Authn and Authz
---------------

.. sourcecode:: python

  from pyramid.authentication import \
             AuthTktAuthenticationPolicy
  class Root(object):
      __acl__ = [(Allow, 'chris', 'view')]
  if __name__ == '__main__':
     authn = AuthTktAuthenticationPolicy('scrt')
     config = Configurator(
                 authentication_policy=authn,
                 root_factory=Root)
     # ...

Authn and Authz (2)
-------------------

- In a view, use the Pyramid API in a login handler to "remember"
  authentication credentials.

- Use the headers it returns as input to a response.

Authn and Authz (3)
-------------------

.. sourcecode:: python

  from pyramid.security import remember
  from pyramid.httpexceptions import HTTPFound

  def login_form_handler(request):
      username =  request.POST['username']
      password =  request.POST['password']
      # app-defined "password_check" function
      userid = password_check(username, password) 
      if userid is not None:
          headers = remember(request, userid)
          return HTTPFound('/', headers=headers)
      # otherwise render the login form

Scaffolds
---------

- Pyramid itself has very few opinions.

- Scaffolds have lots of opinions.

- Scaffolds use (and disuse) specific Pyramid features and provide
  integrations with specific persistence systems (SQLAlchemy, ZODB, MongoDB,
  etc).

- "Akhet" is a development environment that creates Pylons-oriented opinions
  atop Pyramid by using a scaffold.

Exception Views
---------------

Application exceptions can be caught.

.. sourcecode:: python

  from myapp import MyException

  @view_config(renderer='templates/oops.pt', 
               context=MyException)
  def onerror(request):
      return {'exception':request.exception}

Exception Debugging
-------------------

- WebError: interactive debugging in the browser.

Including Configuration
-----------------------

- User-developed framework extensions can be included declaratively
  (alternate templating languages, alternate sessioning factories, entire
  applications).

.. sourcecode:: python

  if __name__ == '__main__':
     config = Configurator()
     config.include('pyramid_jinja2')

- ZCML also good for this and supported via ``pyramid_zcml``.

Including Configuration (2)
---------------------------

- Configuration is done in two phases.

- This allows for conflict detection and out-of-order execution of
  configuration.

- Good for ensuring a redistributable plugin doesn't clobber the
  configuration done by another.

Event System
------------

.. sourcecode:: python

  from pyramid.events import NewRequest

  def add_attr(event):
      event.request.called = True

  if __name__ == '__main__':
     config = Configurator()
     config.add_subscriber(add_attr, NewRequest)

Hook Points
-----------

- Authentication and authorization policies.

- Session factory.

- Subscribe to well-known events (``BeforeRender``, ``ContextFound``, etc).

- Finished and response callbacks.

- Pluggable request factory.

- Pluggable traverser.

- View execution and argument mapping.

- Create new configuration decorators and ZCML statements.

Futures
-------

- Pyramid 1.1a1 due out within a few days or weeks.

- GSoC concentrating on porting Pyramid and its dependencies to Python 3.

- Continue collapsing Python web framework world by cooperating rather than
  competing.

- More extension packages (XMLRPC, routing helpers, etc).

- Fuller-stack layers written atop Pyramid.

Hang Out
--------

- Join ``#pylons`` channel on ``irc.freenode.net``.
